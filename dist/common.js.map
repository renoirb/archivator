{"version":3,"sources":["../src/common.js"],"names":["coroutine","gen","coroutineHandler","args","g","next","readLines","path","fd","openSync","stats","fstatSync","line","size","parseCsvLine","toString","closeSync","prepareListGenerator","urls","url","selector","truncate","split","slug","handleIndexSourceErrors","errorObj","code","Boolean","dirName","dirname","createDirectory","fileContents","msg","writeTextFile","Error","console","error"],"mappings":"AAAA,a,yLAEA,sB,qCACA,0B,yCACA,2C,yDACA,yC,6HAEA;;;;;;;;GASA,QAASA,UAAT,CAAmBC,GAAnB,CAAwB,CACtB,MAAO,SAASC,iBAAT,CAA0B,GAAGC,IAA7B,CAAmC,CACxC,KAAMC,GAAIH,IAAI,GAAGE,IAAP,CAAV,CACAC,EAAEC,IAAF,GACA,MAAOD,EACR,CACF,CAED,SAAWE,SAAX,CAAqBC,IAArB,CAA2B,CACzB,KAAMC,IAAK,aAAGC,QAAH,CAAYF,IAAZ,CAAkB,GAAlB,CAAX,CACA,KAAMG,OAAQ,aAAGC,SAAH,CAAaH,EAAb,CAAd,CACA,IAAK,KAAMI,KAAX,GAAmB,2BAAUJ,EAAV,CAAcE,MAAMG,IAApB,CAAnB,CAA8C,CAC5C,KAAMC,cAAaF,KAAKG,QAAL,EAAb,CACP,CACD,aAAGC,SAAH,CAAaR,EAAb,CACD,CAED,SAAWS,oBAAX,CAAgCC,IAAhC,CAAsC,CACpC,IAAK,KAAMN,KAAX,GAAmBM,KAAnB,CAAyB,CACvB,KAAMJ,cAAaF,IAAb,CACP,CACF,CAED,QAASE,aAAT,CAAsBF,IAAtB,CAA4B,CAC1B,KAAM,CAACO,GAAD,CAAMC,SAAW,EAAjB,CAAqBC,SAAW,EAAhC,EAAsCT,KAAKU,KAAL,CAAW,GAAX,CAA5C,CACA,KAAMC,MAAO,oBAAUJ,GAAV,CAAb,CACA,MAAO,CAACA,GAAD,CAAMI,IAAN,CAAYH,QAAZ,CAAsBC,QAAtB,CACR,CAED,QAASG,wBAAT,CAAiCC,QAAjC,CAA2C,CACzC,GAAIA,SAASC,IAAT,GAAkB,QAAlB,EAA8BC,QAAQF,SAASlB,IAAjB,CAAlC,CAA0D,CACxD,KAAMqB,SAAU,eAASC,OAAT,CAAiBJ,SAASlB,IAA1B,CAAhB,CACA,aAAGuB,eAAH,CAAmBF,OAAnB,EACA,KAAMG,cAAe,+BAArB,CACA,KAAMC,KAAO,SAAQP,SAASlB,IAAK,6CAAnC,CACA,aAAG0B,aAAH,CAAiBR,SAASlB,IAA1B,CAAgCwB,YAAhC,CAA8C,MAA9C,EACA,KAAM,IAAIG,MAAJ,CAAUF,GAAV,CACP,CACD;AACA;AACAG,QAAQC,KAAR,CAAc,yBAAd,CAAyCX,QAAzC,CACD,C,QAGCnB,S,CAAAA,S,SACAN,S,CAAAA,S,SACAc,Y,CAAAA,Y,SACAG,oB,CAAAA,oB,SACAO,uB,CAAAA,uB","file":"common.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport pathutil from 'path';\nimport readlines from 'gen-readlines';\nimport slugifier from './normalizer/slugs';\n\n/**\n * Co Routine - A Generator factory helper\n *\n * Pass a Generator closure and Immediately Invoke that helper\n * so that we can iterate using generators as async handlers.\n *\n * This pattern is used so we can use generators as async consumers\n * or as async handlers.\n */\nfunction coroutine(gen) {\n  return function coroutineHandler(...args) {\n    const g = gen(...args);\n    g.next();\n    return g;\n  };\n}\n\nfunction * readLines(path) {\n  const fd = fs.openSync(path, 'r');\n  const stats = fs.fstatSync(fd);\n  for (const line of readlines(fd, stats.size)) {\n    yield parseCsvLine(line.toString());\n  }\n  fs.closeSync(fd);\n}\n\nfunction * prepareListGenerator(urls) {\n  for (const line of urls) {\n    yield parseCsvLine(line);\n  }\n}\n\nfunction parseCsvLine(line) {\n  const [url, selector = '', truncate = ''] = line.split(';');\n  const slug = slugifier(url);\n  return {url, slug, selector, truncate};\n}\n\nfunction handleIndexSourceErrors(errorObj) {\n  if (errorObj.code === 'ENOENT' && Boolean(errorObj.path)) {\n    const dirName = pathutil.dirname(errorObj.path);\n    fs.createDirectory(dirName);\n    const fileContents = 'http://renoirb.com;#contents;';\n    const msg = `File \"${errorObj.path}\" did not exist, we created one. Try again.`;\n    fs.writeTextFile(errorObj.path, fileContents, 'utf8');\n    throw new Error(msg);\n  }\n  // Handle error codes below #TODO\n  // if (errorObj.code === 'ENOTFOUND')\n  console.error('handleIndexSourceErrors', errorObj);\n}\n\nexport {\n  readLines,\n  coroutine,\n  parseCsvLine,\n  prepareListGenerator,\n  handleIndexSourceErrors\n};\n"]}