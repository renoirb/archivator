{"version":3,"sources":["../../src/normalizer/hash.js"],"names":["resourceUrl","hash","createHash","urlObj","err","Error","pathname","extension","match","ret","update","digest","toLowerCase"],"mappings":"AAAA,a,yDAEA,8B,6CACA,wB,kFAEA;;mBAIeA,aAAe,CAC5B;;;;;;;;;;;;;KAcA,KAAMC,MAAO,iBAAOC,UAAP,CAAkB,MAAlB,CAAb,CACA,GAAIC,QAAS,EAAb,CACA,GAAI,CACFA,OAAS,aAAQH,WAAR,CACV,CAAC,MAAOI,GAAP,CAAY,CACZ,KAAM,IAAIC,MAAJ,CAAUL,WAAV,CAAuBI,GAAvB,CACP,CAED,KAAME,UAAWH,OAAOG,QAAxB,CACA;AACA,GAAIC,WAAYD,SAASE,KAAT,CAAe,iBAAf,CAAhB,CACA,GAAID,YAAc,IAAlB,CAAwB,CACtB;;;;;;OAOAA,UAAY,MACb,CATD,IASO,CACLA,UAAYA,UAAU,CAAV,CACb,CACD;AACA,KAAME,KAAMR,KAAKS,MAAL,CAAYV,WAAZ,EAAyBW,MAAzB,CAAgC,KAAhC,EAAyCJ,UAAUK,WAAV,EAArD,CACA;AACA,MAAOH,IACR,C","file":"hash.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\nimport {URL} from 'url';\n\n/**\n * Rewrite a file name based on an URL they were downloaded from\n */\n\nexport default resourceUrl => {\n  /**\n   * const hashes = crypto.getHashes();\n   * Yields available hashes\n   * ['DSA', 'DSA-SHA', 'DSA-SHA1', ...]\n   *\n   * See also list of message digests with locally installed OpenSSL/LibreSSL\n   * #TODO\n   *\n   * SHA1 should be enough, we do not want a too long file name.\n   * Ideally it would be something very short but with high entropy\n   * with elliptic curve type of hashes.\n   * Or maybe we could just truncate the string.\n   * Food for thoughts. #TODO\n   */\n  const hash = crypto.createHash('sha1');\n  let urlObj = {};\n  try {\n    urlObj = new URL(resourceUrl);\n  } catch (err) {\n    throw new Error(resourceUrl, err);\n  }\n\n  const pathname = urlObj.pathname;\n  // svg, png, jpg, webm\n  let extension = pathname.match(/(\\.[a-z]{2,})$/i);\n  if (extension === null) {\n    /**\n     * We want an extension, but maybe we should support loading the resource via HTTP\n     * and grab mime-type and figure out what extension.\n     * Maybe we could have an optional parameter to this function and if it exists\n     * and is a string, starting by a dot, we just append that.\n     * Food for thoughts. #TODO\n     */\n    extension = '.img';\n  } else {\n    extension = extension[0];\n  }\n  // console.log('normalizer/hash', resourceUrl, extension); // DEBUG\n  const ret = hash.update(resourceUrl).digest('hex') + extension.toLowerCase();\n  // console.log('normalizer/hash', ret); // DEBUG\n  return ret;\n};\n"]}