{"version":3,"sources":["../../src/normalizer/slugs.js"],"names":["handleSearchParam","urlObjSearchProperty","pass","replace","split","sort","pass2","map","e","pass3","filter","Boolean","pass4","join","out","String","test","handlePathName","urlObjPathName","url","urlObj","err","Error","search","pathname","hostname","toLowerCase"],"mappings":"AAAA,a,yDAEA,wBAEA;;;;;;GAQA;;;;GAKA,QAASA,kBAAT,CAA2BC,qBAAuB,EAAlD,CAAsD,CACpD;AACA;AACA;AACA,KAAMC,MAAOD,qBAAqBE,OAArB,CAA6B,KAA7B,CAAoC,EAApC,EAAwCC,KAAxC,CAA8C,GAA9C,EAAmDC,IAAnD,EAAb,CACA;AACA;AACA;AACA,KAAMC,OAAQJ,KAAKK,GAAL,CAASC,GAAKA,EAAEJ,KAAF,CAAQ,GAAR,CAAd,CAAd,CACA,KAAMK,OAAQH,MAAMI,MAAN,CAAaF,GAAKG,QAAQH,EAAE,CAAF,CAAR,CAAlB,CAAd,CACA,KAAMI,OAAQH,MAAMF,GAAN,CAAUC,GAAKA,EAAEK,IAAF,CAAO,GAAP,CAAf,CAAd,CACA,KAAMC,KAAMC,OAAO,IAAMH,MAAMC,IAAN,CAAW,GAAX,CAAb,EAA8BV,OAA9B,CAAsC,WAAtC,CAAmD,MAAnD,CAAZ,CACA,MAAQ,QAAOa,IAAP,CAAYF,GAAZ,CAAD,CAAqB,EAArB,CAA0BA,GAClC,CAED,QAASG,eAAT,CAAwBC,eAAiB,EAAzC,CAA6C,CAC3C,MAAOH,QAAOG,cAAP,EACEf,OADF,CACU,gBADV,CAC4B,EAD5B,EAEEA,OAFF,CAEU,KAFV,CAEiB,MAFjB,EAGEA,OAHF,CAGU,oBAHV,CAGgC,EAHhC,EAIEA,OAJF,CAIU,KAJV,CAIiB,EAJjB,EAKEA,OALF,CAKU,GALV,CAKe,GALf,EAMEA,OANF,CAMU,MANV,CAMkB,GANlB,EAOEA,OAPF,CAOU,gBAPV,CAO4B,EAP5B,EAQEA,OARF,CAQU,2BARV,CAQuC,EARvC,CASR,C,gBAEcgB,KAAO,CACpB,GAAIC,QAAS,EAAb,CACA,GAAI,CACFA,OAAS,aAAQD,GAAR,CACV,CAAC,MAAOE,GAAP,CAAY,CACZ,KAAM,IAAIC,MAAJ,CAAUH,GAAV,CAAeE,GAAf,CACP,CACD,KAAME,QAASvB,kBAAkBoB,OAAOG,MAAzB,CAAf,CACA,KAAMC,UAAWP,eAAeG,OAAOI,QAAtB,CAAjB,CACA,MAAOT,QAAQ,GAAEK,OAAOK,QAAS,GAAED,QAAS,GAAED,MAAO,EAA9C,EACEG,WADF,GAEEvB,OAFF,CAEU,QAFV,CAEoB,MAFpB,EAGEA,OAHF,CAGU,YAHV,CAGwB,EAHxB,EAIEA,OAJF,CAIU,UAJV,CAIsB,EAJtB,CAKR,C","file":"slugs.js","sourcesContent":["'use strict';\n\nimport {URL} from 'url';\n\n/**\n * Slugifier - An URL to filesystem path normalizer\n *\n * For any URL we want to archive,\n * we want a valid filesystem path\n * in which we will archive files to.\n */\n\n/**\n * The following passes could be one multi-line\n * but it's easier to debug like that if we need\n * to review the pass rules.\n */\nfunction handleSearchParam(urlObjSearchProperty = '') {\n  // Explode at &, and sort search params order for consistent results\n  // ?b=2&a=1&c=  -> [a=1, b=2, c=]\n  // ?a=1&c=&b=2  -> [a=1, b=2, c=]\n  const pass = urlObjSearchProperty.replace(/^\\?/, '').split('&').sort();\n  // Filter out empty elements\n  // ?b=2&a=1&c=  -> [a=1, b=2]\n  // ?b=2&a=1&c   -> [a=1, b=2]\n  const pass2 = pass.map(e => e.split('='));\n  const pass3 = pass2.filter(e => Boolean(e[1]));\n  const pass4 = pass3.map(e => e.join('/'));\n  const out = String('/' + pass4.join('/')).replace(/pageI?d?/i, 'page');\n  return (/^\\/$/.test(out)) ? '' : out;\n}\n\nfunction handlePathName(urlObjPathName = '') {\n  return String(urlObjPathName)\n          .replace(/-[a-z0-9]{5,}$/, '')\n          .replace(/%40/, '_at_')\n          .replace(/\\.(action|fcgi|do)/, '')\n          .replace(/\\/$/, '')\n          .replace(/:/, '/')\n          .replace(/\\/\\//, '/')\n          .replace(/[@=%&#()~!,]+/g, '')\n          .replace(/\\.(s?html?|php|xml|aspx?)/, '');\n}\n\nexport default url => {\n  let urlObj = {};\n  try {\n    urlObj = new URL(url);\n  } catch (err) {\n    throw new Error(url, err);\n  }\n  const search = handleSearchParam(urlObj.search);\n  const pathname = handlePathName(urlObj.pathname);\n  return String(`${urlObj.hostname}${pathname}${search}`)\n          .toLowerCase()\n          .replace(/^https/, 'http')\n          .replace(/^http:\\/\\//, '')\n          .replace(/(www\\.)/g, '');\n};\n"]}